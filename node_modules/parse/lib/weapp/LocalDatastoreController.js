"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _getIterator2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/get-iterator"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));

var _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/promise"));

var _reduce = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/reduce"));

var _stringify = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/json/stringify"));

var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs3/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/asyncToGenerator"));

var _LocalDatastoreUtils = require("./LocalDatastoreUtils");

var _Storage = _interopRequireDefault(require("./Storage"));
/**
 * Copyright (c) 2015-present, Parse, LLC.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @flow
 */


var LocalDatastoreController = {
  fromPinWithName: function () {
    var _fromPinWithName = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee(name
    /*: string*/
    ) {
      var values, objects;
      return _regenerator.default.wrap(function (_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return _Storage.default.getItemAsync(name);

            case 2:
              values = _context.sent;

              if (values) {
                _context.next = 5;
                break;
              }

              return _context.abrupt("return", []);

            case 5:
              objects = JSON.parse(values);
              return _context.abrupt("return", objects);

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function () {
      return _fromPinWithName.apply(this, arguments);
    };
  }(),
  pinWithName: function (name
  /*: string*/
  , value
  /*: any*/
  ) {
    var values = (0, _stringify.default)(value);
    return _Storage.default.setItemAsync(name, values);
  },
  unPinWithName: function (name
  /*: string*/
  ) {
    return _Storage.default.removeItemAsync(name);
  },
  getAllContents: function () {
    var _getAllContents = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee3() {
      var keys;
      return _regenerator.default.wrap(function (_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return _Storage.default.getAllKeysAsync();

            case 2:
              keys = _context3.sent;
              return _context3.abrupt("return", (0, _reduce.default)(keys).call(keys,
              /*#__PURE__*/
              function () {
                var _ref = (0, _asyncToGenerator2.default)(
                /*#__PURE__*/
                _regenerator.default.mark(function _callee2(previousPromise, key) {
                  var LDS, value;
                  return _regenerator.default.wrap(function (_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          _context2.next = 2;
                          return previousPromise;

                        case 2:
                          LDS = _context2.sent;

                          if (!(0, _LocalDatastoreUtils.isLocalDatastoreKey)(key)) {
                            _context2.next = 8;
                            break;
                          }

                          _context2.next = 6;
                          return _Storage.default.getItemAsync(key);

                        case 6:
                          value = _context2.sent;

                          try {
                            LDS[key] = JSON.parse(value);
                          } catch (error) {
                            console.error('Error getAllContents: ', error);
                          }

                        case 8:
                          return _context2.abrupt("return", LDS);

                        case 9:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2);
                }));

                return function () {
                  return _ref.apply(this, arguments);
                };
              }(), _promise.default.resolve({})));

            case 4:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function () {
      return _getAllContents.apply(this, arguments);
    };
  }(),
  // Used for testing
  getRawStorage: function () {
    var _getRawStorage = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee5() {
      var keys;
      return _regenerator.default.wrap(function (_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return _Storage.default.getAllKeysAsync();

            case 2:
              keys = _context5.sent;
              return _context5.abrupt("return", (0, _reduce.default)(keys).call(keys,
              /*#__PURE__*/
              function () {
                var _ref2 = (0, _asyncToGenerator2.default)(
                /*#__PURE__*/
                _regenerator.default.mark(function _callee4(previousPromise, key) {
                  var LDS, value;
                  return _regenerator.default.wrap(function (_context4) {
                    while (1) {
                      switch (_context4.prev = _context4.next) {
                        case 0:
                          _context4.next = 2;
                          return previousPromise;

                        case 2:
                          LDS = _context4.sent;
                          _context4.next = 5;
                          return _Storage.default.getItemAsync(key);

                        case 5:
                          value = _context4.sent;
                          LDS[key] = value;
                          return _context4.abrupt("return", LDS);

                        case 8:
                        case "end":
                          return _context4.stop();
                      }
                    }
                  }, _callee4);
                }));

                return function () {
                  return _ref2.apply(this, arguments);
                };
              }(), _promise.default.resolve({})));

            case 4:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));

    return function () {
      return _getRawStorage.apply(this, arguments);
    };
  }(),
  clear: function () {
    var _clear = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee6() {
      var keys, toRemove, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, key, promises;

      return _regenerator.default.wrap(function (_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return _Storage.default.getAllKeysAsync();

            case 2:
              keys = _context6.sent;
              toRemove = [];
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context6.prev = 7;

              for (_iterator = (0, _getIterator2.default)(keys); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                key = _step.value;

                if ((0, _LocalDatastoreUtils.isLocalDatastoreKey)(key)) {
                  toRemove.push(key);
                }
              }

              _context6.next = 15;
              break;

            case 11:
              _context6.prev = 11;
              _context6.t0 = _context6["catch"](7);
              _didIteratorError = true;
              _iteratorError = _context6.t0;

            case 15:
              _context6.prev = 15;
              _context6.prev = 16;

              if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
              }

            case 18:
              _context6.prev = 18;

              if (!_didIteratorError) {
                _context6.next = 21;
                break;
              }

              throw _iteratorError;

            case 21:
              return _context6.finish(18);

            case 22:
              return _context6.finish(15);

            case 23:
              promises = (0, _map.default)(toRemove).call(toRemove, this.unPinWithName);
              return _context6.abrupt("return", _promise.default.all(promises));

            case 25:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this, [[7, 11, 15, 23], [16,, 18, 22]]);
    }));

    return function () {
      return _clear.apply(this, arguments);
    };
  }()
};
module.exports = LocalDatastoreController;